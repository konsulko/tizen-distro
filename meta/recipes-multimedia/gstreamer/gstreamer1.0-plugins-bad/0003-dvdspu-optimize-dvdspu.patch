From 034838cc011f7c2e4d20a54e43c6a07bcf633b80 Mon Sep 17 00:00:00 2001
From: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
Date: Mon, 9 Nov 2015 21:19:37 +0200
Subject: [PATCH 3/3] dvdspu: optimize dvdspu

The blend method is pretty un-optimized; split in runs and handle the
special cases of transparency efficiently.

Signed-off-by: Pantelis Antoniou <pantelis.antoniou@konsulko.com>
---
 gst/dvdspu/gstdvdspu-render.c | 57 ++++++++++++++++++++++++++++++-------------
 1 file changed, 40 insertions(+), 17 deletions(-)

diff --git a/gst/dvdspu/gstdvdspu-render.c b/gst/dvdspu/gstdvdspu-render.c
index 9c34270..7d6e37a 100644
--- a/gst/dvdspu/gstdvdspu-render.c
+++ b/gst/dvdspu/gstdvdspu-render.c
@@ -48,13 +48,17 @@ void
 gstspu_blend_comp_buffers (SpuState * state, guint8 * planes[3])
 {
   gint16 uv_end;
-  gint16 left, x;
+  gint16 left, x, xstart;
   guint8 *out_U;
   guint8 *out_V;
   guint32 *in_U;
   guint32 *in_V;
   guint32 *in_A;
+  guint32 stride_U, stride_V;
   gint16 comp_last_x = state->comp_right;
+  guint32 tmp;
+  guint16 inv_A;
+  guint32 tmp_A;
 
   if (comp_last_x < state->comp_left)
     return;                     /* Didn't draw in the comp buffers, nothing to do... */
@@ -79,21 +83,40 @@ gstspu_blend_comp_buffers (SpuState * state, guint8 * planes[3])
   uv_end = (comp_last_x + 1) / 2;
   left = state->comp_left / 2;
 
-  out_U += left * GST_VIDEO_INFO_COMP_PSTRIDE (&state->info, 1);
-  out_V += left * GST_VIDEO_INFO_COMP_PSTRIDE (&state->info, 2);
-  for (x = left; x < uv_end; x++) {
-    guint32 tmp;
-    /* Each entry in the compositing buffer is 4 summed pixels, so the
-     * inverse alpha is (4 * 0xff) - in_A[x] */
-    guint16 inv_A = (4 * 0xff) - in_A[x];
-
-    tmp = in_U[x] + inv_A * *out_U;
-    *out_U = (guint8) (tmp / (4 * 0xff));
-
-    tmp = in_V[x] + inv_A * *out_V;
-    *out_V = (guint8) (tmp / (4 * 0xff));
-
-    out_U += GST_VIDEO_INFO_COMP_PSTRIDE (&state->info, 1);
-    out_V += GST_VIDEO_INFO_COMP_PSTRIDE (&state->info, 2);
+  stride_U = GST_VIDEO_INFO_COMP_PSTRIDE (&state->info, 1);
+  stride_V = GST_VIDEO_INFO_COMP_PSTRIDE (&state->info, 2);
+  out_U += left * stride_U;
+  out_V += left * stride_V;
+
+  /* split in runs; it's more efficient */
+  x = left;
+  while (x < uv_end) {
+    /* calculate runs */
+    xstart = x;
+    tmp_A = in_A[x++];
+    while (x < uv_end && in_A[x] == tmp_A)
+      x++;
+    if (tmp_A == 0) {
+      /* transparent */
+      out_U += stride_U * (x - xstart);
+      out_V += stride_V * (x - xstart);
+    } else if (tmp_A == 4 * 0xff) {
+      /* solid */
+      for (; xstart < x; xstart++,
+	     out_U += stride_U, out_V += stride_V) {
+        *out_U = (guint8)(in_U[xstart] / (4 * 0xff));
+        *out_V = (guint8)(in_V[xstart] / (4 * 0xff));
+      }
+    } else {
+      /* some transparent value */
+      inv_A = (4 * 0xff) - tmp_A;
+      for (; xstart < x; xstart++,
+	     out_U += stride_U, out_V += stride_V) {
+        tmp = in_U[xstart] + inv_A * *out_U;
+        *out_U = (guint8) (tmp / (4 * 0xff));
+        tmp = in_V[xstart] + inv_A * *out_V;
+        *out_V = (guint8) (tmp / (4 * 0xff));
+      }
+    }
   }
 }
-- 
1.9.1

